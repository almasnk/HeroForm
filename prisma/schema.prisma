generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String  @id @default(cuid())
  name          String?
  email         String? @unique @db.VarChar(320)
  emailVerified Boolean
  image         String? @db.Text
  accessToken   String? @db.Text
  forms         Form[]
}

model Form {
  id                String             @id @default(cuid())
  publicId          String             @unique
  userId            String
  spreadsheetId     String?            @unique
  webhookUrl        String?            @db.Text
  redirectUrl       String?            @db.Text
  name              String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses         Response[]
  questions         Question[]
  slackIntegration  SlackIntegration?
  sheetsIntegration SheetsIntegration?
}

model SlackIntegration {
  id                      String @id @default(cuid())
  form                    Form   @relation(fields: [formId], references: [id])
  formId                  String @unique
  botUserId               String
  scope                   String
  accessToken             String @db.Text
  webhookUrl              String @db.Text
  webhookConfigurationUrl String @db.Text
  channelId               String
  channel                 String
}

model SheetsIntegration {
  id            String @id @default(cuid())
  form          Form   @relation(fields: [formId], references: [id])
  formId        String @unique
  spreadsheetId String
  refreshToken  String @db.Text
}

model Question {
  id              String            @id @default(cuid())
  formId          String
  prompt          String            @db.Text
  type            String
  options         Json?
  properties      Properties?
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  responseDetails ResponseDetails[]
}

model Properties {
  id                         String   @id @default(cuid())
  questionId                 String   @unique
  isRequired                 Boolean
  placeholder                String
  order                      Int
  isMultipleSelectionAllowed Boolean?
  isOtherOptionAllowed       Boolean?
  isMaxLengthSpecified       Boolean?
  maxCharacters              Int?
  schedulingLink             String?  @db.Text
  question                   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Response {
  id              String            @id @default(cuid())
  formId          String
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  responseDetails ResponseDetails[]
}

model ResponseDetails {
  id         String   @id @default(cuid())
  responseId String
  questionId String
  value      String   @db.Text
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
