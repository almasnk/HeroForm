generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  forms         Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id            String     @id @default(cuid())
  publicId      String     @unique
  userId        String
  spreadsheetId String?    @unique
  name          String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses     Response[]
  questions     Question[]
}

model Question {
  id              String            @id @default(cuid())
  formId          String
  prompt          String
  type            String
  options         Json?
  properties      Properties?
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  responseDetails ResponseDetails[]
}

model Properties {
  id                         String   @id @default(cuid())
  questionId                 String   @unique
  isRequired                 Boolean
  placeholder                String
  order                      Int
  isMultipleSelectionAllowed Boolean?
  isOtherOptionAllowed       Boolean?
  isMaxLengthSpecified       Boolean?
  maxCharacters              Int?
  schedulingLink             String?
  question                   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Response {
  id              String            @id @default(cuid())
  formId          String
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  responseDetails ResponseDetails[]
}

model ResponseDetails {
  id         String   @id @default(cuid())
  responseId String
  questionId String
  value      String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
